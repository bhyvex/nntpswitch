#!/usr/bin/perl -w
use strict;

if ( $#ARGV != 3 ) {
    die "Usage: $0 <infile> <configetc> <config.h> <config.c>\n";
}

my $infile   = $ARGV[0];
my $conffile = $ARGV[1];
my $hfile    = $ARGV[2];
my $cfile    = $ARGV[3];

if ( ! -f $infile ) {
    die "Cant stat $infile $!\n";
}

my $realconf = "";  # the final etc/config file
my $configh  = "";  # the aconfig.h config + entry structs
my $configh2 = "";  # the aconfig.c holding defaults
my $configh3 = "";  # all config entries structs for the c parser

$configh  .= sprintf("/* Auto generated by make config in $0 %s */\n",scalar localtime(time()) );
$configh2 .= sprintf("/* Auto generated by make config in $0 %s */\n",scalar localtime(time()) );
$realconf .= sprintf("# Auto generated by make config in $0 %s\n",scalar localtime(time()) );
$configh  .= "enum cftype {\n\ttype_str, type_int\n};\n";
$configh  .= "struct cfentry {\n\tchar *name;\n\tvoid *addr;\n\tenum cftype type;\n};\n#define CONFIG struct config\nstruct config {\n";
$configh2 .= "#include <stdio.h>\n#include \"aconfig.h\"\nstruct config cfg = {\n";
$configh3 = "struct cfentry confentry[] = {\n";

open(F,$infile) || die $!;
while(<F>){
    chop;
    if ( m/^$/g || m/^#/g ) {
        $realconf .= "$_\n";
	next;
    }

    my ($type, $key, $val) = split(/ /, $_, 3);
    if ( $type eq "string" || $type eq "char" ) {
        $val = "NULL" if ! $val;
        $configh  .= sprintf("\tchar *%s;\n", $key);
        $configh2 .= sprintf("\t\"%s\",\n", $val);
	$realconf .= sprintf("%s %s\n",$key, $val);
	$configh3 .= sprintf("\t{ \"%s\", (void*)&cfg.%s, type_str } ,\n", $key, $key);
    }elsif ( $type eq "int" ) {
        $val = "0" if ! $val;
        $configh  .= sprintf("\tint %s;\n", $key);
        $configh2 .= sprintf("\t%d,\n", $val);
	$realconf .= sprintf("%s %s\n",$key, $val);
	$configh3 .= sprintf("\t{ \"%s\", (void*)&cfg.%s, type_int } ,\n", $key, $key);
    }else{
        print "Unhandled config entry: $key $val\n";
    }
}
close F;

$configh  .= "\tchar *null;\n};\nextern struct config cfg;\nextern struct cfentry confentry[];\n";
$configh3 .= "\t{ NULL, NULL, 0 },\n";
$configh2 .= "\tNULL\n};\n$configh3};\n";

open(F,">$conffile") || die "$conffile $!\n";
print F $realconf;
close F;

open(F,">$hfile") || die "$cfile $!\n";
print F $configh;
close F;

open(F,">$cfile") || die "$cfile $!\n";
print F $configh2;
close F;

